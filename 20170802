IDEA
//仅自己学习用，转自SCDN
 十大Intellij IDEA快捷键
2015-01-16 21:31 280312人阅读 评论(57) 收藏 举报
版权声明：本文为博主原创文章，未经博主允许不得转载。欢迎访问 http://blog.csdn.net/dc_726
目录(?)[+]
Intellij IDEA中有很多快捷键让人爱不释手，stackoverflow上也有一些有趣的讨论。每个人都有自己的最爱，想排出个理想的榜单还真是困难。以前也整理过Intellij的快捷键，这次就按照我日常开发时的使用频率，简单分类列一下我最喜欢的十大快捷-神-键吧。
1 智能提示

Intellij首当其冲的当然就是Intelligence智能！基本的代码提示用Ctrl+Space，还有更智能地按类型信息提示Ctrl+Shift+Space，但因为Intellij总是随着我们敲击而自动提示，所以很多时候都不会手动敲这两个快捷键(除非提示框消失了)。用F2/ Shift+F2移动到有错误的代码，Alt+Enter快速修复(即Eclipse中的Quick Fix功能)。当智能提示为我们自动补全方法名时，我们通常要自己补上行尾的反括号和分号，当括号嵌套很多层时会很麻烦，这时我们只需敲Ctrl+Shift+Enter就能自动补全末尾的字符。而且不只是括号，例如敲完if/for时也可以自动补上{}花括号。
最后要说一点，Intellij能够智能感知spring、hibernate等主流框架的配置文件和类，以静制动，在看似“静态”的外表下，智能地扫描理解你的项目是如何构造和配置的。
2 重构

Intellij重构是另一完爆Eclipse的功能，其智能程度令人瞠目结舌，比如提取变量时自动检查到所有匹配同时提取成一个变量等。尤其看过《重构-改善既有代码设计》之后，有了Intellij的配合简直是令人大呼过瘾！也正是强大的智能和重构功能，使Intellij下的TDD开发非常顺畅。
切入正题，先说一个无敌的重构功能大汇总快捷键Ctrl+Shift+Alt+T，叫做Refactor This。按法有点复杂，但也符合Intellij的风格，很多快捷键都要双手完成，而不像Eclipse不少最有用的快捷键可以潇洒地单手完成(不知道算不算Eclipse的一大优点)，但各位用过Emacs的话就会觉得也没什么了(非Emacs黑)。此外，还有些最常用的重构技巧，因为太常用了，若每次都在Refactor This菜单里选的话效率有些低。比如Shift+F6直接就是改名，Ctrl+Alt+V则是提取变量。
3 代码生成

这一点类似Eclipse，虽不是独到之处，但因为日常使用频率极高，所以还是罗列在榜单前面。常用的有fori/sout/psvm+Tab即可生成循环、System.out、main方法等boilerplate样板代码，用Ctrl+J可以查看所有模板。后面“辅助”一节中将会讲到Alt+Insert，在编辑窗口中点击可以生成构造函数、toString、getter/setter、重写父类方法等。这两个技巧实在太常用了，几乎每天都要生成一堆main、System.out和getter/setter。
另外，Intellij IDEA 13中加入了后缀自动补全功能(Postfix Completion)，比模板生成更加灵活和强大。例如要输入for(User user : users)只需输入user.for+Tab。再比如，要输入Date birthday = user.getBirthday();只需输入user.getBirthday().var+Tab即可。
4 编辑

编辑中不得不说的一大神键就是能够自动按语法选中代码的Ctrl+W以及反向的Ctrl+Shift+W了。此外，Ctrl+Left/Right移动光标到前/后单词，Ctrl+[/]移动到前/后代码块，这些类Vim风格的光标移动也是一大亮点。以上Ctrl+Left/Right/[]加上Shift的话就能选中跳跃范围内的代码。Alt+Forward/Backward移动到前/后方法。还有些非常普通的像Ctrl+Y删除行、Ctrl+D复制行、Ctrl+</>折叠代码就不多说了。
关于光标移动再多扩展一点，除了Intellij本身已提供的功能外，我们还可以安装ideaVim或者emacsIDEAs享受到Vim的快速移动和Emacs的AceJump功能(超爽！)。另外，Intellij的书签功能也是不错的，用Ctrl+Shift+Num定义1-10书签(再次按这组快捷键则是删除书签)，然后通过Ctrl+Num跳转。这避免了多次使用前/下一编辑位置Ctrl+Left/Right来回跳转的麻烦，而且此快捷键默认与Windows热键冲突(默认多了Alt，与Windows改变显示器显示方向冲突，一不小心显示器就变成倒着显式的了，冏啊)。
5 查找打开

类似Eclipse，Intellij的Ctrl+N/Ctrl+Shift+N可以打开类或资源，但Intellij更加智能一些，我们输入的任何字符都将看作模糊匹配，省却了Eclipse中还有输入*的麻烦。最新版本的IDEA还加入了Search Everywhere功能，只需按Shift+Shift即可在一个弹出框中搜索任何东西，包括类、资源、配置项、方法等等。
类的继承关系则可用Ctrl+H打开类层次窗口，在继承层次上跳转则用Ctrl+B/Ctrl+Alt+B分别对应父类或父方法定义和子类或子方法实现，查看当前类的所有方法用Ctrl+F12。
要找类或方法的使用也很简单，Alt+F7。要查找文本的出现位置就用Ctrl+F/Ctrl+Shift+F在当前窗口或全工程中查找，再配合F3/Shift+F3前后移动到下一匹配处。
Intellij更加智能的又一佐证是在任意菜单或显示窗口，都可以直接输入你要找的单词，Intellij就会自动为你过滤。
6 其他辅助

以上这些神键配上一些辅助快捷键，即可让你的双手90%以上的时间摆脱鼠标，专注于键盘仿佛在进行钢琴表演。这些不起眼却是至关重要的最后一块拼图有：
Ø  命令：Ctrl+Shift+A可以查找所有Intellij的命令，并且每个命令后面还有其快捷键。所以它不仅是一大神键，也是查找学习快捷键的工具。
Ø  新建：Alt+Insert可以新建类、方法等任何东西。
Ø  格式化代码：格式化import列表Ctrl+Alt+O，格式化代码Ctrl+Alt+L。
Ø  切换窗口：Alt+Num，常用的有1-项目结构，3-搜索结果，4/5-运行调试。Ctrl+Tab切换标签页，Ctrl+E/Ctrl+Shift+E打开最近打开过的或编辑过的文件。
Ø  单元测试：Ctrl+Alt+T创建单元测试用例。
Ø  运行：Alt+Shift+F10运行程序，Shift+F9启动调试，Ctrl+F2停止。
Ø  调试：F7/F8/F9分别对应Step into，Step over，Continue。
此外还有些我自定义的，例如水平分屏Ctrl+|等，和一些神奇的小功能Ctrl+Shift+V粘贴很早以前拷贝过的，Alt+Shift+Insert进入到列模式进行按列选中。
7 最终榜单

这榜单阵容太豪华了，后几名都是如此有用，毫不示弱。
Ø  Top #10切来切去：Ctrl+Tab
Ø  Top #9选你所想：Ctrl+W
Ø  Top #8代码生成：Template/Postfix +Tab
Ø  Top #7发号施令：Ctrl+Shift+A
Ø  Top #6无处藏身：Shift+Shift
Ø  Top #5自动完成：Ctrl+Shift+Enter
Ø  Top #4创造万物：Alt+Insert
太难割舍，前三名并列吧！
Ø  Top #1智能补全：Ctrl+Shift+Space
Ø  Top #1自我修复：Alt+Enter
Ø  Top #1重构一切：Ctrl+Shift+Alt+T

-----------------------------------------------------------------------------------------------------------------------------------------
IntelliJ Idea 常用快捷键列表
 
Alt+回车 导入包,自动修正
Ctrl+N   查找类
Ctrl+Shift+N 查找文件
Ctrl+Alt+L  格式化代码
Ctrl+Alt+O 优化导入的类和包
Alt+Insert 生成代码(如get,set方法,构造函数等)
Ctrl+E或者Alt+Shift+C  最近更改的代码
Ctrl+R 替换文本
Ctrl+F 查找文本
Ctrl+Shift+Space 自动补全代码
Ctrl+空格 代码提示
Ctrl+Alt+Space 类名或接口名提示
Ctrl+P 方法参数提示
Ctrl+Shift+Alt+N 查找类中的方法或变量
Alt+Shift+C 对比最近修改的代码
 
Shift+F6  重构-重命名
Ctrl+Shift+先上键
Ctrl+X 删除行
Ctrl+D 复制行
Ctrl+/ 或 Ctrl+Shift+/  注释（// 或者/*...*/ ）
Ctrl+J  自动代码
Ctrl+E 最近打开的文件
Ctrl+H 显示类结构图
Ctrl+Q 显示注释文档
Alt+F1 查找代码所在位置
Alt+1 快速打开或隐藏工程面板
Ctrl+Alt+ left/right 返回至上次浏览的位置
Alt+ left/right 切换代码视图
Alt+ Up/Down 在方法间快速移动定位
Ctrl+Shift+Up/Down 代码向上/下移动。
F2 或Shift+F2 高亮错误或警告快速定位
 
代码标签输入完成后，按Tab，生成代码。
选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。
Ctrl+W 选中代码，连续按会有其他效果
选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。
Ctrl+Up/Down 光标跳转到第一行或最后一行下
Ctrl+B 快速打开光标处的类或方法 

----------------------------------------------------------------------------------------------------------------------------------------
IntelliJ IDEA 使用心得与常用快捷键

刚开始学习写Java的时候，用的eclipse，正式工作后，主要用的myeclipse，去年初在前辈的推荐下，在2折的时候买了正版的 IntelliJ IDEA 和 Pycharm，12.0版终生使用，一年更新。
使用前早就久闻其名，据说是最好的Java开发工具。
起先用的非常不习惯，但是花了钱的，硬着头皮用了下去。
短短一个礼拜，彻底爱上了它！就是辣么酸爽！--------------------------------------------------------------谨以此文献给对于拥抱IDEA还存在疑虑的筒子们

JetBrains（这个公司的名称翻译过来就是“大脑喷射？”） 公司的宣传语是这么说的：Develop with pleasure！（带着快乐开发！）

Why?
他们咋这么有信心呢？
这到底是怎样的一个工具？

跟我一起来数数IDEA特别长的地方：

一.黑色主题 Darcula

眼睛舒服，最重要的是酷！
设置方式：FILE--Settings--Edit--Colors&Fonts--Scheme name



二.智能提示

创建或引入项目的时候，会自动引入缺少的包，真找不着的还可以search in the net
键入代码的时候，区分大小写的智能提示，自动引入包，如果有重名的会列出所有选择，但是比 myeclipse 的更聪明，至于怎么个聪明法，你自个儿试试就知道了

三.工具集成

基本上正式开发的常用工具基本都集成了，而且基本都在你非常容易触到的位置。
说说我比较常用的：

1.ant 
你懂的

2.maven
你也懂的

3.SVN
相比之下，IDEA的SVN的提交提供了更多的选项和功能
提交的界面两侧会显示当前文件和修改的部分对比，可以非常方便地检查和修改文件。
提交前：
(1).可选择自动格式化
(2).可选择自动忽略没有使用的imports
(3).可选择分析代码
(4).检查是否有TODO
提交后甚至可以选择将改变上传到特定的目录


4.系统终端
有了这个东西，你就不必频繁地切换窗口了
打开方式：Tools--Open Terminal

5.SSH工具
打开方式：Tools--Start SSH session

6.数据库连接工具
打开方式：View--Tool Windows--Database

7.IDEA talk
神奇的东西，你可以联系局域网内其它的IDEA使用者，可以方便地把你的代码show给你的同事
打开方式：View--Tool Windows--IDEA talk

8.Changes
非常方便的changes视图，它会变色显示你所有改动过的文件，而且可以方便的与 本地历史 或 线上历史 做对比
打开方式：View--Tool Windows--Changes

还有git、github、cvs、groovy consle以及等等，真没有的你还可以：
FILE--Settings--Plugins

四.强大的绘图工具

读源码看不懂项目结构？写文章画类图好麻烦？
右键diagram帮助你

上个例图：

右键选择 Show Categories 有惊喜，什么值域、方法、构造器、内部类统统有

五.无缝接入eclipse和myeclipse

IDEA可以直接打开有.project文件的项目，也可以将自身项目导出成eclipse的项目。
而且因为IDEA的项目配置文件为1个.iml文件加一个独立文件夹.idea，
所以只要你将两者放入ignore目录，即使在你个人使用IDEA而团队使用其他IDE的情况下，也并不会对其他人造成麻烦。

导出方法：FILE--Export to eclipse

六.更小的体积，更快的速度

用过myeclipse的你明白的

综上，我想你应该能够明白，为啥用IDEA写代码，就是那么愉快，就是那么酸爽，就是那么令人停不下来！


接着分享开发中我比较常用的一些快捷键：

一.找文件找代码找引用相关

1.双击shift 
 在项目的所有目录查找，就是你想看到你不想看到的和你没想过你能看到的都给你找出来

2.ctrl+f 
当前文件查找特定内容

3.ctrl+shift+f
当前项目查找包含特定内容的文件

4.ctrl+n 
查找类

5.ctrl+shift+n
查找文件

6.ctrl+e 
最近的文件

7.alt+F7
非常非常频繁使用的一个快捷键，可以帮你找到你的函数或者变量或者类的所有引用到的地方

二.编辑相关

1.shift+enter
另起一行

2.ctrl+r
当前文件替换特定内容

3.ctrl+shift+r
当前项目替换特定内容

4.shift+F6
非常非常省心省力的一个快捷键，可以重命名你的类、方法、变量等等，而且这个重命名甚至可以选择替换掉注释中的内容

5.ctrl+d
复制当前行到下一行

6.ctrl+x
剪切当前行

7.ctrl+c \ ctrl+v 
大家都懂的

8.ctrl+z
撤销

9.ctrl+shift+z
取消撤销

10.ctrl+k
提交代码到SVN

11.ctrl+t
更新代码

12.alt+insert
非常非常以及相当方便的一个组合键，不信您往下看
在类中使用：


可以自动生成构造器、getter/setter等等常用方法
在项目目录上使用：


可用于新建各种文件。

13.alt+enter
又是一个大杀器，有多杀？
例1：
发现代码很“黄”怎么办？

鼠标移上去喵一下：

试试alt+enter：

选择simplify看看

我勒个去，代码简洁了有木有啊！

PS:黄色警告编译可以通过，不影响程序的正常运行，一般都是一些对于代码优化的建议，我遇到过的有：
(1).can be simplify
代码可以简化
(2).Variable is never use
声明的变量从未被使用
(3)unnecessary boxing
不必要的声明包装

以及等等等，多留意下，对于编码的某些细节能够更了解。

例2：
写个类实现某个接口，加上 implements Runnable 后你就会发现这条红色的波浪线：

咱试试在这行上来个 alt+enter:

感动地哭了有木有？你想到的没想到的IDEA都帮你想到了。
看到代码里提示的各种红XX，就试试alt+enter吧！什么未抛异常啊没有try catch啊都能搞得定。

14.ctrl+alt+L

自动格式化代码，我已经养成了写完代码就来一发的习惯。
你可以个性化设置你自己的代码风格：File--Settings--CodeStyle

——————————切——————————切——————————切——————————切——————————切——————————

凡事有利有弊，IDEA同样是把双刃剑，最后说说它不好的地方

1.最重要的就是“贵”！
专业版个人许可2折可以接受，5折小贵，不打折桑不起！！！囧RZ～
美刀的消费水准令国内大多在屌丝线上挣扎的猿类们望而却步。
好在JetBrains是有社区版的，最近对于学生也有免费的Key。
对于使用破解版的小伙伴，建议自己用用就好了，不必太声张。

用户养成良好的软件付费习惯，才能让我们的工作变得越来越有价值。

2.集成太完善了
集成的工具完全能够应付大多数的工作需求，对于不求甚解又偷懒的筒子们，直接使用，可能很多工具的细节，你都不会了解，也不会再去了解了。
比如：maven,ant

3.不自带JDK
不是缺点的缺点，myeclipse是集成的


差不多了，该撸代码了。
以上这些，就是我使用IDEA一年半来几乎所有的心得了。
能力有限，砖头轻拍。
如果你有杀伤力更强大的手段，欢迎交流。

后记：最近偶然发现，这篇文章被人转载了，而且没注明出处，令人蛋疼。
在此重申下，转载，请注明出处。
来自：http://www.blogjava.net/rockblue1988/archive/2014/10/24/418994.html 

----------------------------------------------------------------------------------------------------------------------------------------

IDEA 和 Eclipse 使用对比

阅读目录

1.文件和导航关联
2.即刻完成 Instant completion
3.常用语句
4.相同项目切换 SVN 地址
     前段时间从 Eclipse 中将开发工作转移到了 IDEA。

     IDEA 确实有很多地方比 Eclipse 做的好，总结了一些 IDEA 和 Eclipse 的不同。

回到顶部
1.文件和导航关联

   经常需要打开某个文件的时候，想在左边的文件树上自动打开关联到位置，这样很方便的找寻本目录下的其他文件或者其他的相关文件。

   其实这个IntelliJ提供了好几种解决方案，第一个就是和Eclipse一样的方式，如下:

   以前在Eclipse中设置也很简单，但是IntelliJ里面稍微有点不一样。

   如果想临时一次，打开文件的时候点击下图的小地球（第一眼看的时候很像个小地球仪）图标即可。

   如果你想和 Eclipse 让自动定位资源，那么在上图的浮层中可以看到两个选项 AutoScroll to Source 和 AutoScroll from source。

   

   IntelliJ 很人性化的分了两个设置在里面，你两个都勾选就是基本和 Eclipse 的功能保持了完全一致，只是勾选一个自然也可以。

   还有一种方式就是利用 IntelliJ 提供的Navigation Bar，IntelliJ 很多功能操作都可以键盘化，这个就是喜欢键盘化操作的人的必备功能。

   操作方式就是打开文件的时候，使用快捷键 ⌘+UP (Jump to Navigation Bar)，然后就会出现一个下拉。

   基本就是这个文件所在目录的文件列表，还可以使用上下左右的键位来选择其他目录，是不是很酷？

回到顶部
2.即刻完成 Instant completion

   第一个也是最吸引我的就是“即刻完成”特性，不同于其他 IDE，IDEA 可在任意地方提供这个功能，而不只是当你要访问某个类的成员时。

   只需要输入单词的首字母，IntelliJ IDEA 就会立即给出最相关的、最适合此处代码编辑需要的选项共你选择。



回到顶部
3.常用语句

   在IntelJ中和Eclipse中稍有不同，在Eclipse中，输入main再按Alt+/即可自动补全main函数，但是在IntellJ中则是输入psvm。

   在方法体内部有for循环，在IntellJ中是输入fori，然后会有一个提示，选中需要的for循环即可。

   System.out.println();在IntellJ中是输入sout。

回到顶部
4.相同项目切换 SVN 地址



   这样修改结束后，提交是没有问题的，更新的时候还是旧地址，这时只需重启下 IDEA 即可。

 

作者：Orson 
出处：http://www.cnblogs.com/java-class/ 
如果，您认为阅读这篇博客让您有些收获，不妨点击一下右下角的【推荐】 
如果，您希望更容易地发现我的新博客，不妨点击一下左下角的【关注我】 
如果，您对我的博客内容感兴趣，请继续关注我的后续博客，我是【Orson】 

本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段 声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。 

----------------------------------------------------------------------------------------------------------------------------------------
最好的Java IDE之争：Eclipse PK IntelliJ IDEA

话说，好马配好鞍，一个好的工匠，必定要有一套好的工具才能打造出最好的工艺给大家。之前，Plumbr团队里的所有成员都使用Eclipse编辑器，而如今，大家都成为IntelliJ IDEA用户。那么，到底是什么让大家抛弃老练且免费的战马，转而去抢高达600美元的座位呢？当然，IntelliJ IDEA也提供了开源免费的社区版本。下面不妨听原文作者细细道来，并列出了几大原因。

1.索引

尽管JetBrains的伙计正在做“引擎盖下”的事情，但是他们索引的确是极其快速，并且还支持各种不同的内容。快速的索引在几个可用性特征上已见成效：

自动检索代码，并且会给出相应的警告：在Eclipse中，你必须手动启动分析，而IntelliJ
IDEA则会快速做出响应和回馈，它能懂得上下文。
在相同的索引条件下，IntelliJ IDEA在代码完成和代码生成方面要好很多。大家还记得那个Lists里臭名昭著的java.awt.List自动导入，开发者花费数年才把“顶级推荐”予以删除掉，而使用IntelliJ IDEA完全没有这样的烦劳。
按ALT+ENTER键会自动提供完成程序，该功能可以使用在多个场合，我甚至怀疑有Amazon Mechanical Turk在偷窥我，因为它的建议实在是太好了。
 
2.跨语言操作上更胜一筹

即使在IntelliJ IDEA里想要表现不同的内容，编辑起来也是非常自然的。无论是编辑Java、JavaScript、HTML或者是一个JPA查询——其跨语言操作都是非常的好。即使不是编辑Java代码，也无需重新设置快捷键。并且具有很好的代码补全功能，尤其是编写javascript代码，而Eclipse却无法提供支持。

3.给出基于上下文的建议

当开发者在着手处理不同的问题时，Eclipse试图给大家提供“最好的建议”，这也就意味着我的屏幕布局得不停的切换，从开发模式到调试再到重构等，这是非常令人困扰的。而现在，只需一个额外的上下文窗口即可解决上面所有问题。

4.调试

使用IntelliJ IDEA调试，你只需要把光标移到你的表达式中然后按下Alt+F8。IntelliJ IDEA会很好的理解这个你可能需要的表达式，然后显示一个对话窗口，其中有一些它给出的建议参数变量。你也可以编辑并在对话框中立即得到这个表达式的值。相当的方便！试过这个特性后，你就不会再想在Eclipse中调试了。

5.技术支持

Eclipse由基金会成立，这本身不是什么坏事，但由于基金会里的各个团体利益出发点不同，所以在管理和执行上肯定会有所不同。对于开发者来说，这并不是什么好事，当你想获得一些技术指导或支持时，它很有可能不能及时给你回复。而IntelliJ IDEA完全不会存在这样的问题。

下面是我最近发现的几个好东西：

当你输入时，JPA查询语法会立即进行正确性检查，这样就节省了大量的时间来检查错误。
属性文件集成：在一个属性文件里，开发者可以在源码里看到某个属性的使用状态。
整合不同的浏览器：为了测试HTML代码的兼容性，开发者可以在IDE里建立不同的浏览器，这样开发者就无需安装各种不同的浏览器进行测试。
在IDE的右边会显示CSS代码颜色，所以开发者不用在浏览器里对此进行检查。 
 

最近，越来越多的开发者体会到，使用IntelliJ IDEA要好于Eclipse，对此，笔者从网上搜集到了一些资料（以下内容节选自：为何IntelliJ IDEA比Eclipse更好）：

1.自动完成

拥有自动完成功能的IDE要比notepad更加优秀，在这个领域，能感知上下文的IntelliJ IDEA有了质的飞跃。例如，我们开始如下一行代码：

[java] view plaincopy 
assertElement(By.id("errorMessage"), vi  
现在我们想要查找以vi开头的选项有哪些。

IntelliJ  IDEA怎么做的呢？无需等待任何的按键，它马上就能理解assertElement需要一个Conditaion类的示例作为第二个参数，而在Condition类中有一个静态变量名叫visible。IntelliJ IDEA会直接建议这个唯一的有效选项。

  
然而，Eclipse会怎么做呢？唉，它不能理解上下文，它不知道光标所在处就是assertElement方法的第二个参数。因此当你按下“神圣”的Ctrl+Space时，Eclipse只会简单的显示全局中以vi字母开头的一切。 
 
在一个美丽的弹出框中我看到了很多漂亮的高亮的格式规范的无用信息。 
2.重构

专业的程序员能够高效的使用IDE提供的重构功能。所有的现代IDE都提供许多印象深刻的重构功能。但还是那句，IntelliJ  IDEA的重构功能也很聪明智能。它们能读懂你需要什么，然后针对不同的情况提供给你最适合的解决方案。 
例如，假设有一个assertErrorMessageIsHidden方法： 
[java] view plaincopy 
public void assertErrorMessageIsHidden() {  
  assertElement(By.id("errorMessage"), Condition.visible);  
}  
我们以字符串“errorMessage”作为该方法的一个参数。

让我们先从IntelliJ IDEA开始，将光标放在任何字符串“errorMessage”上，按Ctrl+Alt+P(代表“parameter”)，IntelliJ IDEA将会建议我们可以在哪些表达中用次字符串为参数。

 
当“errorMessage”表达式被选定以后，IntelliJ IDEA将会建议一些可能的能用做该参数的变量名称。 
 
IntelliJ IDEA在作为Java IDE时确实比Eclipse更好。如果你考虑他们其他方面的能力例如用于其他例如C++、Python、Scala的IDE上，或者是作为构建桌面的应用的平台，Eclipse很有可能拔得头筹。

事实上这是依赖于对他们的定义的，Eclipse已将自己定位为一个抽象平台，用来使用插件构建任何工具，而IntelliJ IDEA则定位为一个“智能的java IDE”，而且它正如此。

3.Eclipse好于IntelliJ IDEA的地方

下面列一些Eclipse可能比IntelliJ IDEA更好的地方：

Eclipse看上去更棒，所有大题小做的SWT以及本地控件都用的很值。Eclipse看上去很稳定的深思熟虑过的程序，它有着漂亮的字体以及图标。然而当第一眼看到IntelliJ IDEA是，它像是作噱头的玩具一样，有着不完全的图标以及笨拙的Swing界面。
Eclipse拥有更强的项目结构支持。在IntelliJ IDEA中，你的项目是有模块组成。在Eclipse中你拥有一个由工程组成的工作区，每个工程都能被单独打开或关闭，分组或隐藏。但是你真的需要么？
为Eclipse编写插件似乎很简单
IntelliJ IDEA比Eclipse使用更多的系统资源。这其实也说得通--因为IntelliJ IDEA更加智能
最后，Eclipse是免费的，然而IntelliJ IDEA Community版本已经够我用了
最后的建议

如果你需要漂亮的图标，用来创建桌面程序的平台，C++IDE或者你用一个低配的笔记本工作，那么Eclipse可能对你来说是更好的选择。但是如果你是一个正儿八经的Java开发者，你需要更快更方便的工具帮你集中注意于解决问题而不是让你分心，IntelliJ  IDEA则正是你所需要的。

关于IntelliJ IDEA

目前最新的稳定版本是12.1.4， 点击查看 IntelliJ IDEA最新版本介绍。

下载地址：

IntelliJ IDEA：（IntelliJ IDEA提供两个版本，旗舰版，需要licence，但有30天的试用期；社区版，开源免费）
相关资料：

从Eclipse转移到IntelliJ IDEA一点心得
Eclipse用户使用IntelliJ IDEA的常见问答
IntelliJ IDEA 的 20 个代码自动完成的特性
来自：Plumbr
----------------------------------------------------------------------------------------------------------------------------------------
从Eclipse转移到IntelliJ IDEA一点心得
付学良 发表于 2013-04-13 19:57   368217 阅读
本人使用IntelliJ IDEA其实并不太久，用了这段时间以后，觉得的确很是好用。刚刚从Eclipse转过来的很多人开始可能不适应，我就把使用过程中的一些经验和常用功能分享下，当然在看这篇之前推荐你先看完IntelliJ IDEA 的 20 个代码自动完成的特性，这篇文章对自动完成的特性介绍的非常好，只是快捷键说明部分还可以更完善一些，可以照顾下默认绑定键位不一致的童鞋。本文在说明快捷键的时候是根据Mac OSX 10.5+的默认keymap，当然也会提供相关的文字说明，如果和我的绑定不一致的可以直接去keymap中搜索即可。

基本设置

显示行号

这个以前在Eclipse中是个很简单的问题，转移到IntelliJ上以后的一些人也问过这个问题。使用同样的方式设置了以后发现只是对当前文件起作用了，打开另外一个文件依然没有行号。就好比你只是在vim中执行命令set number，而不是在.vimrc中设置一样的效果。这个是需要在IDE Settings中设置下的，如图所示勾选即可: image 其他设置可参照该设置项勾选即可，例如显示空格等等.

文件和导航关联

我们在写代码的时候经常需要打开某个文件的时候，想在左边的文件树上自动打开关联到位置，这样很方便的找寻本目录下的其他文件或者其他的相关文件，其实这个IntelliJ提供了好几种解决方案，第一个就是和Eclipse一样的方式，如下:

以前在Eclipse中设置也很简单，但是IntelliJ里面稍微有点不一样，如果想临时一次的话，打开文件的时候点击下图的小地球（第一眼看的时候很像个小地球仪）图标即可 image 如果你想和Eclipse的那个一样，让这一切自动的话，那么在上图的浮层中可以看到两个选项AutoScroll to Source和AutoScroll from source，IntelliJ很人性化的分了两个设置在里面，你两个都勾选就是基本和Eclipse的功能保持了完全一致，只是勾选一个自然也可以.
还有一种方式就是利用IntelliJ提供的Navigation Bar，IntelliJ很多功能操作都可以键盘化，这个就是喜欢键盘化操作的人的必备功能，操作方式就是打开文件的时候，使用快捷键⌘+UP (Jump to Navigation Bar)，然后就会出现一个下拉，基本就是这个文件所在目录的文件列表，还可以使用上下左右的键位来选择其他目录，是不是很酷？

备注:此处建议把View > Navigation Bar的选项点掉，这样就使用快捷键之后就会在你鼠标的位置出现，感觉会更输入一些，当然这样你就基本失去了使用鼠标的权利，这个需要你根据个人癖好使用即可。

快捷键使用

如果你是苹果电脑用户的话，建议你改成Mac OSX 10.5+的键位绑定，因为Mac OSX 10.5这个兼容Windows的版本的键位实在是太蹩脚了，用着是真难受，好比你默认习惯⌘+w是关闭标签，在这个键位绑定中竟然是根据符号选择文本的一个快捷键.

这里主要介绍几个可能大家常用的，或者是你可能并不知道IntelliJ中有的几个快捷键，特别常用的你直接参照官网的Keymap介绍Getting Started就可以了。学会在Keymap中自己查询需要的快捷键是主要的，不要每次都打开那个没用的百度，具体可以参照本文最后给出的链接。

Outline调出

以前在Eclipse中用的很多的一个快捷键就是ctrl+o，这样可以调出代码文件的所有成员变量和方法，并且可以支持搜索很是方便，IntelliJ这种基本的功能自然是有，新手的话还经常问，这个在IntellJ中的快捷键是⌘+F12 (File Structure)。如果你不是Mac OSX 10.5+键位绑定的话，小括号中的内容就是你可以去Keymap中去搜索的内容。

基本操作

复制整行或者块:在Eclipse中使用ctrl+alt+Up，IntelliJ默认是⌘+D (Duplicate Line or Block)，其实这个和Eclipse中的有差距，尤其是多行的时候或者选中内容的时候，不信你可以试试。所以你可以把Keymap中的Duplicate Lines定义上一个快捷键，我定义的是Option+D，这个键位在我的默认绑定中是没任何快捷键的，你可以自己绑定一个试试。
根据符号选择文本:这个键位用的太多了，并且也是非常的好用，举个例子，有这样一行代码<name>SpringSource Milestones Proxy</name> 你光标在Milestones中的某一个位置，你想替换SpringSource Milestones Proxy为其他单词，假设想替换为Test XX，其实这样你只需要Option+Up (Select Word at Caret)两下就可以选中你想要的单词了，当你想在开发过程中，你会发现这个键位用的太多了，多到换了其他没有这个键位的编辑器或者IDE上，很是不习惯。
删除整行: 可以直接⌘+delete (Delete Line)或者利用IntelliJ智能的功能，剪切的快捷键，当本行选中文本的时候剪切`⌘+x会按照选中的文本实现剪切，但是你本行内无任何选中文本的时候会自动剪切整行，那么自然就类似一个删除本行的快捷键，但是这个其实还是比较蹩脚的，建议使用⌘+delete。
想直接跳转到接口的实现方法: ⌘+option+鼠标单击或者⌘+option+B。
语句自动完成 Statements completion:这个在IntelliJ IDEA 的 20 个代码自动完成的特性中已经说明，这里还是着重说下，因为的确很好用，也强烈推荐下，还有文中说的智能自动完成 ctrl+shift+Space，当给你的提示太多的时候，这个键绝对会给你惊喜.
同样单词之间跳转:在Eclipse中的快捷键是ctrl+k，这个挺好用的，在IntelliJ中也不缺这个功能，但是在Mac OSX 10.5+的键位绑定中默认为空。据说Windows的默认绑定中是有绑定的，自己可以查询下，我自己绑定了一个⌘+ctrl+k (Find Word at Caret)，没有的需要自己绑定一个，然后还能结合其他的键位实现上一个⌘+G (Find Next)下一个⌘+Shift+G (Find Previous)的功能.很是实用。
版本控制设置

我们开发肯定是有版本控制的，大家以前Eclipse的时候在本地文件和版本库不一致的时候，那么文件以及所在的文件夹都会出现一个〉表示，大家能很轻松的看到本地文件修改了哪一些，但是IntelliJ中默认是不能这样的。仅仅是给变化的文件在修改的时候提供了颜色上的变化，不包括其所在的各个父级文件夹哦，如果想和Eclipse一样的话需要如下图把设置勾选就可以了
vcs_show_dir_status 其实看英文解释就可以明白了，这个默认开启以后如果想调整文件夹的显示颜色的时候就直接去Settings > Editor > Colors & Fonts > File Status中调整即可了，可以调整成自己喜欢的样子。

Java资源文件非英文的情况显示

IntelliJ在资源文件这方面个人觉得也是完胜Eclipse的，在Resource Bundle方式下想修改一个属性是相当方便的，可以在一个操作界面上修改所有语言的属性，这一切都是自动完成的，如下图所示： resource_bundle

并且还很贴心的有一个排序和分组的功能，尤其是这个排序。

默认设置下也有一个问题，就是中文默认会显示为Unicode码的，其实勾选一个设置(Settings > File Encodings)就可以了，如下图：
resource_native_to_ascii

这样设置以后所有Unicode显示的就可以自动转化为其应该显示的语言了.

符合Maven约定结构的web项目如何更好的运行

记得刚开始用Eclipse的时候那时候默认是不支持Java EE项目的，必须使用一个MyEclipse的插件，直到今天好似还有人在用这个玩意，当年的时候每个Web项目修改之后都必须Deploy一下，修改的东西才会被执行，很是痛苦。后来就自己利用Tomcat插件，这个可以保证你修改jsp以及静态文件的时候不需要Deploy直接就可以被执行，因为Tomcat的目录指向其实直接是指向到了你的项目文件，这样的确省心了很多。

在IntelliJ中如果你是传统的Java EE的结构(根目录下面有src，webMoudle这样的结构)，那么在直接在Run Configurations中添加一个Tomcat即可，点击+号添加即可(当然需要注意虽然没搜索框，你输入字符会自动给你筛选结果)，这样运行的时候修改Java文件的话需要主动Make Project也就是⌘+F9 (Make Project).但是如果你是符合maven约定的项目结构的话如果继续这样配置就很不理想了，每次修改了jsp文件竟然也需要Make Project才可以，因为每次Make Project以后IntelliJ会自动给你DeployMent，这样好似又回到了几年前那种很麻烦的环境.

这个问题其实很容易解决，就是不要使用这种方式来运行你的web项目，既然符合maven结构的项目自然是使用maven或者gradle这种构建工具了，那么你需要利用maven的jetty的插件来运行项目即可了，如下图配置即可: idea-maven-run

当然你也可以如下图直接点击运行就会自动添加一个:

maven-jetty-plugin-run
参看上图其实也没必须非用jetty，用tomcat6或者tomcat7的插件运行也可以。

Eclipse的web结构项目如何导入和运行

鉴于有一些用户还没转型Maven等来构建项目，当然我也衷心的说一句，构建这块还是赶紧转了吧.因为不转的话还单独出来这个章节，并且有的操作还是相当麻烦，下面也会讲到，还是一一道来吧，导入的时候有两个选择然后我分两个部分说明，点击File > Import Project…，然后选择你的项目目录，点击OK，如下图:

image

使用新建项目来导入

这个方式图中所示的第一种，导入基本就是一路next到完成，但是你第一次也可以费点心思注意下每一步做了啥，例如帮你分析了jar有哪一些，如果你使用了Spring还给你分析你的所有配置文件。最后完成以后项目就开始构建索引，等一切就绪以后我们就可以完成的基本配置了，由于是web项目基本上能够在Tomcat等服务器上跑起来就基本算成功了。主要几个点:

处理好依赖关系，因为我们没使用maven，所以你得自己动手丰衣足食了
设置java文件的编译路径，如果需要的话
添加你的Tomcat，运行成功
依赖关系

打开File > Project Structure ，本节我们主要用到下图几个标红的部分: project_structure
我们先了解下这几个主要部件:

SDKs:主要存放了我们的JDK等，如下图(我自己下载带source的JDK，这样可以直接查看JDK相关的Java源代码): project_structure_sdks
Global Libraries:主要是公用的jar文件，例如servlet的几个jar可能每个项目都需要，但是Eclipse的变量在此变得不好使，所以需要使用这个地方来配置，如下图参照使用即可: project_strutcture_global
Facets:在此不做介绍，如有需要后续添加
Libraries:这里基本是项目的库，不是全局的，导入的项目一般都会把你Eclipse中的。classpath中的所有的依赖都导过来作为一个lib库，然后应用到你的项目的模块中
Modules:这个基本包括了项目的模块，通常来说Eclipse的项目结构中是单模块的
我们需要做的配置主要在Modules中，其他的几个自己根据理解配置即可。

我们先查看Modules中的Sources，如下图: project_structure_modules_sources
把项目所有的源码都添加即可，图中所示我的项目中其实少了resource的文件夹，这样我选中resource然后点击Sources即可，这样就会在左边的Source Folders中添加一个resource的文件夹。
然后是Paths部分，这个主要是class的输出路径，默认是在根目录下的out文件夹中，如果项目中对配置文件的解析等有写死路径，必须严格遵循Java EE的规范的话，那么需要将此部分修改如下(如果不存在我假设的情况可忽略本步骤):
project_structure_modules_paths
然后的Dependencies，就更好配置了，添加需要的依赖即可。
这些步骤完成以后我们就可以点击Run > Edit Configurations ，点击左上角的+号，然后选择**Tomcat > Local Server **，这些步骤和Eclipse类似，选择相应路径等等，只需要注意一点就可以，就是需要添加一个DeployMent，如下图:
run_configurations_tomcat

如果是Windows的图中的DeployMent中的+号可能是在右侧，点击之后会弹出对话框选择文件夹，选择eclipse默认的webMoudle文件夹即可(MyEclipse就是WebRoot文件夹)，这个一定不能选错，不要选成项目的主文件夹，否则运行就不成功了，再然后ctrl+R运行即可。以debug方式运行就是ctrl+D。

使用IntelliJ对Eclipse项目的支持导入项目

基本参照上个基本都类似，就是步骤比上个步骤要少点，如果出现问题参照上个章节即可。

HQL查询支持

以前Eclipse有个HQL的插件可以直接输入HQL语法，查询测试结果是否正确，在IntelliJ中你也可以，不过不需要任何插件默认提供支持的，如果在导入项目的时候没有自动添加Hibernate的支持的话，那需要添加一下Hibernate的支持，鼠标选中项目，点击右键如下图:
image
点击选择Hibernate即可，如果没有Hibernate应该是项目已经自动添加了Hibernate的支持了。然后完成以后就可以如下图操作即可:
image
选中上面HQL图标，在出来的控制台输入你想输入的HQL即可了，一样可以自动完成的哦。

注意事项

IntelliJ对于文件是默认随时保存的，基本不需要你⌘+s(这个键位默认是保存所有)，所以需要注意不要随手不小心把某个文件改了下，然后直接关闭标签了，其实你的无意的操作已经导致修改了文件，可能导致你在项目运行的时候发现一个很离奇的错误，我暂时没发现可以关闭自动保存的设置，如果你对此非有强迫症的话，vim的插件可能会帮助到你。
IntelliJ中的文件是实时和本地文件同步的，所以Eclipse的刷新功能就不要问了，因为在这根本不需要那个功能。有的编辑器会提醒你是否和本地文件更新，这里也是默认不给任何提醒的，只要你修改了，这里就会立即自动同步更新文件。
在主菜单File下面，有个奇怪的Power Save Mode，这里也说明下，这个顾名思义是省电模式。当你勾选此模式以后，IntelliJ不会给你完成任何自动完成的功能，例如本来你输入一个字符会自动提示的，勾选以后就没有了，如果出现此问题的话可以考虑是不是自己手贱点过这个按钮噢，这个还是比较适合开会的时候无聊看代码用的，又省电又不影响你看代码。
Eclipse中有个F2的功能，可以查看到Java文件定义，你在Spring的配置文件中可能需要配置这个值，但是在IntelliJ中这个是不需要的，因为对于Spring这样的支持很是完善，你只需要在class的属性中输入class的名字然后ctrl+空格 (Basic 这个在code的completion下面)自动就完成了全路径，在智能的条件下可能就不需要蹩脚的实现。
项目刚开始导入或者清除cache重新打开的时候，下面的状态栏部分会显示Indexing，这个时候你就等着就可以了，基本你想做的事情什么都不能做，别在这个时候着急点来点去，不过它索引的速度挺快的，别着急。
Eclipse有个Save Actions的功能，主要是针对Java可以自动格式化以及优化import等功能，这个在IntelliJ上其实默认是没有的，想在IntelliJ中使用这功能可以使用以下两个思路:
利用宏录制，宏在开始以后你就格式化下代码，然后优化下import等操作，然后结束把宏定义一个⌘+s，不过问题就是不管什么文件都会执行这个宏，不仅仅是java文件，我就是利用这个宏主要完成把tab转为空格。
使用Eclipse Code Formatter的插件，这个插件基本和Eclipse默认的功能类似，但是也有少许区别，用户自己思量是否使用即可。
在Mac下IntelliJ代码区域是支持手势放大的，这个在给别人演示的时候很是方便。但是Run、Debug等视图的时候默认能使想到的就是手动的拖动大小，很是不便。你可以尝试下⌘+shift+up/down (Stretch to Top / Bottom)，当然其他的project视图等的也都可以利用这个快捷键配置上下左右的方向键来配置使用，方便的很，强烈推荐使用。
几个技巧

IntelliJ 很少会见到搜索框，其实在没有搜索框的地方你试试直接输入拼音，例如你在 Project 的视图，打开目录树以后你直接敲入字母，如果有符合条件的记录那么会有高亮显示的。
最后

第一次发文，如果有什么问题欢迎留言交流，原始文档放在github上，各位如果也有一些技巧不妨共同完善下本文档。只需要Fock然后Pull Request就可以了，如果你觉得有个github帐号过于麻烦的话，那我个人觉得你还是转行比较合适。如果不想更新只是想订阅持续更新的内容，只需要Watch该项目即可。还可以对项目Star，这样你就可以在自己的帐号页面快速找到本项目。
